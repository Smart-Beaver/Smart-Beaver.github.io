{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Smart Beaver About Welcome to Smart Beaver, a tool designed to simplify and streamline the process of generating code for smart contracts. Whether you're an experienced blockchain developer or just getting started with smart contract development, Smart Beaver helps you to create efficient and secure smart contract code with ease. Language We generate code in the ink! language without the use of any additional libraries. This ensures that your smart contracts are written in a clean and efficient manner. Now you don't have to worry about external dependencies. Features Multiple standard support - PSP22 , PSP34 (coming soon) and PSP37 (coming soon) Many extensions available Metadata Mintable Burnable Wrapper FlashMint (coming soon) Pausable Capped Batch (coming soon) Enumerable (coming soon) Sources All sources can be found on our github organisation Smart-Beaver Contributing We welcome contributions from the community to enhance Smart Beaver. If you have ideas for new features, encounter bugs, or want to improve the documentation you can create an issue on our GitHub repository or send us PullRequest with changes/fixes.","title":"Smart Beaver"},{"location":"#smart-beaver","text":"","title":"Smart Beaver"},{"location":"#about","text":"Welcome to Smart Beaver, a tool designed to simplify and streamline the process of generating code for smart contracts. Whether you're an experienced blockchain developer or just getting started with smart contract development, Smart Beaver helps you to create efficient and secure smart contract code with ease.","title":"About"},{"location":"#language","text":"We generate code in the ink! language without the use of any additional libraries. This ensures that your smart contracts are written in a clean and efficient manner. Now you don't have to worry about external dependencies.","title":"Language"},{"location":"#features","text":"Multiple standard support - PSP22 , PSP34 (coming soon) and PSP37 (coming soon) Many extensions available Metadata Mintable Burnable Wrapper FlashMint (coming soon) Pausable Capped Batch (coming soon) Enumerable (coming soon)","title":"Features"},{"location":"#sources","text":"All sources can be found on our github organisation Smart-Beaver","title":"Sources"},{"location":"#contributing","text":"We welcome contributions from the community to enhance Smart Beaver. If you have ideas for new features, encounter bugs, or want to improve the documentation you can create an issue on our GitHub repository or send us PullRequest with changes/fixes.","title":"Contributing"},{"location":"getting-started/","text":"Getting Started Run locally (front-end wizard) To run our tool locally first clone the repository. git clone https://github.com/Smart-Beaver/wizard-ui.git Create .env file with following contents: NEXT_PUBLIC_CODE_API_BASE_URL=https://raw.githubusercontent.com/Smart-Beaver/contracts-tmp/main NEXT_PUBLIC_DOMAIN_URL=\"http://localhost:3000\" NEXT_PUBLIC_DEBOUNCE_INTERVAL_IN_MS=200 NEXT_PUBLIC_DOCS_URL=\"http://localhost:3000\" NEXT_PUBLIC_GITHUB_URL=\"http://localhost:3000\" NEXT_PUBLIC_CONTACT_EMAIL=\"contact@smartbeaver.io\" Base url can point to some local endpoint too. It just needs to return http 200 response code with text contents of the file ( Content-Type: text/plain; charset=utf-8 ). File structure on the server needs to be like that (only if you decide to host contract code fragemnts locally, otherwise you can ignore it): * {EXTENSION - \"PSP22\" | \"PSP34\" | \"PSP37\"}/ * extensions/ * extension-files * data.rs * lib.rs * traits.rs * errors.rs Install required depedencies: pnpm install Run local dev environment: pnpm dev Front-end should be started now on address: http://localhost:3000 Build wasm module (ink code generation) Install rust 1.70+ If you don't have it installed: refer to those docs or run this command to update rustup toolchain install 1.74 Clone repository git clone https://github.com/Smart-Beaver/ink-generator-wasm.git Execute script in scripts/ folder to build .wasm module and TypeScript interfaces ./scripts/build.sh","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#run-locally-front-end-wizard","text":"To run our tool locally first clone the repository. git clone https://github.com/Smart-Beaver/wizard-ui.git Create .env file with following contents: NEXT_PUBLIC_CODE_API_BASE_URL=https://raw.githubusercontent.com/Smart-Beaver/contracts-tmp/main NEXT_PUBLIC_DOMAIN_URL=\"http://localhost:3000\" NEXT_PUBLIC_DEBOUNCE_INTERVAL_IN_MS=200 NEXT_PUBLIC_DOCS_URL=\"http://localhost:3000\" NEXT_PUBLIC_GITHUB_URL=\"http://localhost:3000\" NEXT_PUBLIC_CONTACT_EMAIL=\"contact@smartbeaver.io\" Base url can point to some local endpoint too. It just needs to return http 200 response code with text contents of the file ( Content-Type: text/plain; charset=utf-8 ). File structure on the server needs to be like that (only if you decide to host contract code fragemnts locally, otherwise you can ignore it): * {EXTENSION - \"PSP22\" | \"PSP34\" | \"PSP37\"}/ * extensions/ * extension-files * data.rs * lib.rs * traits.rs * errors.rs Install required depedencies: pnpm install Run local dev environment: pnpm dev Front-end should be started now on address: http://localhost:3000","title":"Run locally (front-end wizard)"},{"location":"getting-started/#build-wasm-module-ink-code-generation","text":"Install rust 1.70+ If you don't have it installed: refer to those docs or run this command to update rustup toolchain install 1.74 Clone repository git clone https://github.com/Smart-Beaver/ink-generator-wasm.git Execute script in scripts/ folder to build .wasm module and TypeScript interfaces ./scripts/build.sh","title":"Build wasm module (ink code generation)"},{"location":"code-generator/general-architecture/","text":"General architecture In order to have the app easily maintainable it is divided into 3 parts: Front-end with form and code preview Code generator WebAssembly module Public GitHub repository containing smart contract code fragments The main purpose of the front-end app is to collect requirements from the user and present generated code. Entire logic related to the fetching code fragments as well ass generating final smart contract code is located in the wasm module. Code generator is compiled to wasm binary and then is wrapped with typescript bindings. After that, package is pushed to the NPM as ink-generator Below is diagram representing general app architecture:","title":"General architecture"},{"location":"code-generator/general-architecture/#general-architecture","text":"In order to have the app easily maintainable it is divided into 3 parts: Front-end with form and code preview Code generator WebAssembly module Public GitHub repository containing smart contract code fragments The main purpose of the front-end app is to collect requirements from the user and present generated code. Entire logic related to the fetching code fragments as well ass generating final smart contract code is located in the wasm module. Code generator is compiled to wasm binary and then is wrapped with typescript bindings. After that, package is pushed to the NPM as ink-generator Below is diagram representing general app architecture:","title":"General architecture"},{"location":"smart-contract-implementations/deploy-and-test/","text":"How to deploy and test contracts To test our contracts locally you can follow these simple steps: Build contract: cargo contract build --release --features \"contract\" Run local substrate node: substrate-contracts-node Deploy your contract using contracts-ui: https://contracts-ui.substrate.io/ Make sure to select \"Local Node\" in the upper left corner The easiest way to call contract functions is to use the same contracts-ui wep app. For more detailed tutorial to get you onboarded on ink! development look here: https://use.ink/getting-started/setup","title":"How to deploy and test contracts"},{"location":"smart-contract-implementations/deploy-and-test/#how-to-deploy-and-test-contracts","text":"To test our contracts locally you can follow these simple steps: Build contract: cargo contract build --release --features \"contract\" Run local substrate node: substrate-contracts-node Deploy your contract using contracts-ui: https://contracts-ui.substrate.io/ Make sure to select \"Local Node\" in the upper left corner The easiest way to call contract functions is to use the same contracts-ui wep app. For more detailed tutorial to get you onboarded on ink! development look here: https://use.ink/getting-started/setup","title":"How to deploy and test contracts"},{"location":"smart-contract-implementations/psp-22/","text":"PSP-22 Build Install cargo-contract (https://crates.io/crates/cargo-contract) Step 1: rustup component add rust-src . Step 2: cargo install --force --locked cargo-contract . Step 3: (Optional) Install dylint for linting. (MacOS) brew install openssl cargo install cargo-dylint dylint-link . cargo contract build --release --features \"contract\" About Module Overview lib.rs : The main module that includes all other modules and re-exports key components. data.rs : Defines structs and enums, which are used to manage token data and events. errors.rs : Contains enums for error handling. traits.rs : Declares several traits like PSP22 , PSP22Metadata , PSP22Burnable , PSP22Mintable , PSP22Pausable , PSP22Wrapper , and Ownable , which define the standard functionalities of PSP22 tokens. lib.rs Token : Main struct representing a PSP22 token. It includes methods for token creation ( new ) and for emitting events ( emit_events ). Approval and Transfer : Event structs used for emitting events related to token transfer and approval. data.rs PSP22Data : A struct that maintains the state of all account balances and allowances. Includes methods for token supply management, balance queries, and allowance management. PSP22Event : An enum representing events that occur during state changes of PSP22Data . errors.rs PSP22Error : An enum for PSP22-specific errors, such as insufficient balance or allowance. OwnableError : An enum for errors related to ownership management. traits.rs PSP22 : A trait defining the core functionalities of a PSP22 token, including methods for querying supply, balance, and allowance, and for executing transfers and approvals. PSP22Metadata : A trait for accessing token metadata like name, symbol, and decimals. PSP22Burnable : A trait for token burning functionalities. PSP22Mintable : A trait for token minting functionalities. PSP22Pausable : A trait for pausing and unpausing token transfers. PSP22Wrapper : A trait for deposit and withdrawal functionalities. Ownable : A trait for ownership management, including querying owner, transferring ownership, and renouncing ownership. General Notes The library adheres to the PSP22 standard for fungible tokens. Most methods in PSP22Data and the traits in traits.rs return Result types, indicating that they can fail with a PSP22Error . Events are an essential part of the library, used for signaling state changes like transfers and approvals. This documentation provides an overview of your Rust library's structure and functionalities. For a complete understanding, users should refer to the detailed comments and implementations within each module.","title":"Psp 22"},{"location":"smart-contract-implementations/psp-22/#psp-22","text":"","title":"PSP-22"},{"location":"smart-contract-implementations/psp-22/#build","text":"Install cargo-contract (https://crates.io/crates/cargo-contract) Step 1: rustup component add rust-src . Step 2: cargo install --force --locked cargo-contract . Step 3: (Optional) Install dylint for linting. (MacOS) brew install openssl cargo install cargo-dylint dylint-link . cargo contract build --release --features \"contract\"","title":"Build"},{"location":"smart-contract-implementations/psp-22/#about","text":"","title":"About"},{"location":"smart-contract-implementations/psp-22/#module-overview","text":"lib.rs : The main module that includes all other modules and re-exports key components. data.rs : Defines structs and enums, which are used to manage token data and events. errors.rs : Contains enums for error handling. traits.rs : Declares several traits like PSP22 , PSP22Metadata , PSP22Burnable , PSP22Mintable , PSP22Pausable , PSP22Wrapper , and Ownable , which define the standard functionalities of PSP22 tokens.","title":"Module Overview"},{"location":"smart-contract-implementations/psp-22/#librs","text":"Token : Main struct representing a PSP22 token. It includes methods for token creation ( new ) and for emitting events ( emit_events ). Approval and Transfer : Event structs used for emitting events related to token transfer and approval.","title":"lib.rs"},{"location":"smart-contract-implementations/psp-22/#datars","text":"PSP22Data : A struct that maintains the state of all account balances and allowances. Includes methods for token supply management, balance queries, and allowance management. PSP22Event : An enum representing events that occur during state changes of PSP22Data .","title":"data.rs"},{"location":"smart-contract-implementations/psp-22/#errorsrs","text":"PSP22Error : An enum for PSP22-specific errors, such as insufficient balance or allowance. OwnableError : An enum for errors related to ownership management.","title":"errors.rs"},{"location":"smart-contract-implementations/psp-22/#traitsrs","text":"PSP22 : A trait defining the core functionalities of a PSP22 token, including methods for querying supply, balance, and allowance, and for executing transfers and approvals. PSP22Metadata : A trait for accessing token metadata like name, symbol, and decimals. PSP22Burnable : A trait for token burning functionalities. PSP22Mintable : A trait for token minting functionalities. PSP22Pausable : A trait for pausing and unpausing token transfers. PSP22Wrapper : A trait for deposit and withdrawal functionalities. Ownable : A trait for ownership management, including querying owner, transferring ownership, and renouncing ownership.","title":"traits.rs"},{"location":"smart-contract-implementations/psp-22/#general-notes","text":"The library adheres to the PSP22 standard for fungible tokens. Most methods in PSP22Data and the traits in traits.rs return Result types, indicating that they can fail with a PSP22Error . Events are an essential part of the library, used for signaling state changes like transfers and approvals. This documentation provides an overview of your Rust library's structure and functionalities. For a complete understanding, users should refer to the detailed comments and implementations within each module.","title":"General Notes"},{"location":"smart-contract-implementations/psp-34/","text":"PSP-34 Coming soon...","title":"PSP-34"},{"location":"smart-contract-implementations/psp-34/#psp-34","text":"Coming soon...","title":"PSP-34"},{"location":"smart-contract-implementations/psp-37/","text":"PSP-34 Coming soon...","title":"PSP-34"},{"location":"smart-contract-implementations/psp-37/#psp-34","text":"Coming soon...","title":"PSP-34"}]}